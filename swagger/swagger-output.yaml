openapi: 3.0.0
info:
  title: School Management API
  version: 1.0.0
  description: API for school admin storage and management
servers:
  - url: http://localhost:5500/api
components:
  schemas:
    student:
      type: object
      properties:
        _id:
          type: string
          description: Autogenerated Id of student
          readOnly: true
        firstName:
          type: string
          description: The first name of the student
          example: Solomon
        lastName:
          type: string
          description: The last name of the student
          example: Grundy
        email:
          type: string
          description: Email address of the user
          example: solomongrundy@user.com
        dateOfBirth:
          type: string
          format: date
          description: The date of birth of the student
        classId:
          type: string
          description: Autogenerated class ID of the student
          readOnly: true
        degreeId:
          type: string
          description: Autogenerated degree ID of the student
        address:
          type: object
          description: Optional user address
          properties:
            street:
              type: string
              example: 123 Applebay Street
            city:
              type: string
              example: Gotham
            state:
              type: string
              example: New York
            zip:
              type: string
              example: '10001'
            country:
              type: string
              example: USA
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the student account was created
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the student account was last updated
      required:
        - firstName
        - lastName
        - email
        - dateOfBirth
        - address
    staff:
      type: object
      properties:
        _id:
          type: string
          description: Autogenerated ID of the staff
          readOnly: true
        firstName:
          type: string
          description: The first name of the staff
          example: Solomon
        lastName:
          type: string
          description: The last name of the staff
          example: Grundy
        gender:
          type: string
          enum:
            - male
            - female
            - other
          description: Gender of the staff
          example: male
        email:
          type: string
          format: email
          description: Email address of the staff
          example: solomongrundy@school.edu
        phone:
          type: string
          description: Phone number of the staff
          example: '09012345678'
        subjects:
          type: array
          description: List of subject IDs the staff teaches
          items:
            type: string
            format: uuid
            example: 60f6e9f2b7a1c142d8ef8c11
        classIds:
          type: array
          description: List of class IDs assigned to the staff
          items:
            type: string
            format: uuid
            example: 60f6e9f2b7a1c142d8ef8c12
        hireDate:
          type: string
          format: date-time
          description: Date the staff was hired
          example: '2024-08-15T10:00:00Z'
        address:
          type: object
          description: Optional user address
          properties:
            street:
              type: string
              example: 123 Applebay Street
            city:
              type: string
              example: Gotham
            state:
              type: string
              example: New York
            zip:
              type: string
              example: '10001'
            country:
              type: string
              example: USA
        qualification:
          type: string
          description: Academic or professional qualification
          example: B.Sc in Physics
        status:
          type: string
          enum:
            - active
            - inactive
            - suspended
          description: Employment status of the staff
          example: active
        role:
          type: string
          enum:
            - admin
            - staff
          description: System role of the staff
          example: staff
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the staff account was created
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the staff account was last updated
          readOnly: true
      required:
        - firstName
        - lastName
        - gender
        - email
        - phone
        - qualification
        - status
        - role
    class:
      type: object
      properties:
        _id:
          type: string
          description: Autogenerated ID of the class
          readOnly: true
        title:
          type: string
          description: The title for the class
          example: Intro to calculus
        code:
          type: string
          description: A code that signifies a class
          example: MTH104
        room:
          type: string
          description: The physical location of the class within the campus
          example: Block A - Room 10
        schedule:
          type: string
          description: The time at wich the class takes place
          example: MWF 10:00 - 11:00
      required:
        - title
        - code
        - room
        - schedule
    degree:
      type: object
      properties:
        _id:
          type: string
          description: Autogenerated ID of the class
          readOnly: true
        name:
          type: string
          description: The name of the degree
          example: Bachelor of Computer Science
        durationYears:
          type: number
          description: the number of years needed for the degree
          example: 4
        department:
          type: string
          description: The department for the degree
          example: Computer Science
        accreditation:
          type: string
          description: the accreditation earned by comepleteing the degree
          example: NCC
      required:
        - title
        - code
        - room
        - schedule
  securitySchemes:
    GitHubOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:5500/api/auth/login
          tokenUrl: http://localhost:5500/github/callback
          scopes:
            student: Access student data
            staff: Access staff data
            class: Access class data
            degree: Access degree data
          refreshUrl: http://localhost:5500/github/callback
security:
  - GitHubOAuth:
      - user
paths:
  /auth/login:
    get:
      tags:
        - Auth
      summary: Login with GitHub (OAuth2)
      description: Initiates GitHub OAuth2 flow
      security:
        - GitHubOAuth: []
      responses:
        '302':
          description: Redirects to GitHub for authentication
  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logout user
      description: Destroys session and logs out user
      responses:
        '200':
          description: Successfully logged out
  /class:
    get:
      summary: Get all classes
      tags:
        - Class
      responses:
        '200':
          description: List of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/class'
    post:
      summary: Create a new class
      tags:
        - Class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/class'
      responses:
        '201':
          description: Class created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/class'
        '400':
          description: Invalid input
  /class/{id}:
    get:
      summary: Get a class by ID
      tags:
        - Class
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The class ID
      responses:
        '200':
          description: Class found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/class'
        '404':
          description: Class not found
    put:
      summary: Update a class by ID
      tags:
        - Class
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The class ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/class'
      responses:
        '200':
          description: Class updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/class'
        '400':
          description: Invalid input
        '404':
          description: Class not found
    delete:
      summary: Delete a class by ID
      tags:
        - Class
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The class ID
      responses:
        '200':
          description: Class deleted
        '404':
          description: Class not found
  /degree:
    get:
      summary: Get all degreees
      tags:
        - Degree
      responses:
        '200':
          description: List of degreees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/degree'
    post:
      summary: Create a new degree
      tags:
        - Degree
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/degree'
      responses:
        '201':
          description: Ddegree created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/degree'
        '400':
          description: Invalid input
  /degree/{id}:
    get:
      summary: Get a degree by ID
      tags:
        - Degree
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The degree ID
      responses:
        '200':
          description: Ddegree found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/degree'
        '404':
          description: Ddegree not found
    put:
      summary: Update a degree by ID
      tags:
        - Degree
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The degree ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/degree'
      responses:
        '200':
          description: Ddegree updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/degree'
        '400':
          description: Invalid input
        '404':
          description: Ddegree not found
    delete:
      summary: Delete a degree by ID
      tags:
        - Degree
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The degree ID
      responses:
        '200':
          description: Ddegree deleted
        '404':
          description: Ddegree not found
  /staff:
    get:
      summary: Get all staff
      tags:
        - Staff
      responses:
        '200':
          description: List of staff
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/staff'
    post:
      summary: Create a new staff
      tags:
        - Staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/staff'
      responses:
        '201':
          description: Staff created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/staff'
        '400':
          description: Invalid input
  /staff/{id}:
    get:
      summary: Get a staff by ID
      tags:
        - Staff
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The staff ID
      responses:
        '200':
          description: Staff found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/staff'
        '404':
          description: Staff not found
    put:
      summary: Update a staff by ID
      tags:
        - Staff
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The staff ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/staff'
      responses:
        '200':
          description: Staff updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/staff'
        '400':
          description: Invalid input
        '404':
          description: Staff not found
    delete:
      summary: Delete a staff member by ID
      tags:
        - Staff
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The staff ID
      responses:
        '200':
          description: Staff member deleted
        '404':
          description: Staff not found
  /students:
    get:
      summary: Get all students
      tags:
        - Students
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/student'
    post:
      summary: Create a new student
      tags:
        - Students
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/student'
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/student'
        '400':
          description: Invalid input
  /students/{id}:
    get:
      summary: Get a student by ID
      tags:
        - Students
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The student ID
      responses:
        '200':
          description: Student found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/student'
        '404':
          description: Student not found
    put:
      summary: Update a student by ID
      tags:
        - Students
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The student ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/student'
      responses:
        '200':
          description: Student updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/student'
        '400':
          description: Invalid input
        '404':
          description: Student not found
    delete:
      summary: Delete a student by ID
      tags:
        - Students
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The student ID
      responses:
        '200':
          description: Student deleted
        '404':
          description: Student not found
tags:
  - name: Class
    description: API for class information
  - name: Degree
    description: API for degree information
  - name: Staff
    description: API for staff information
  - name: Students
    description: API for student information
